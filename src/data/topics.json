{
  "workflow": {
    "title": "LUMA Workflow",
    "summary": "Step-by-step process for designing and validating UI scaffolds.",
    "details": [
      "LUMA enforces a scaffold-first design workflow:",
      "",
      "1. Design Phase:",
      "   - Create UI structure as JSON scaffold (no code yet)",
      "   - Use Stack, Grid, Form, Table, Button, Field, Text nodes",
      "   - Define responsive overrides for different viewports",
      "",
      "2. Validation Phase:",
      "   - Run: luma ingest scaffold.json (validate structure)",
      "   - Run: luma layout scaffold.json --viewports 320x640,768x1024,1920x1080",
      "   - Run: luma keyboard scaffold.json (check tab flow)",
      "   - Run: luma flow scaffold.json --patterns form,table (validate UX patterns)",
      "",
      "3. Scoring Phase:",
      "   - Run: luma score .ui/runs/<run-id>",
      "   - Check overall score >= 85",
      "   - Verify no MUST pattern failures",
      "   - Verify no unreachable nodes",
      "",
      "4. Review Phase:",
      "   - Run: luma report .ui/runs/<run-id> (generate HTML report)",
      "   - Review issues and refine scaffold",
      "   - Re-run validation until passing",
      "",
      "5. Implementation Phase:",
      "   - Only after scaffold passes, generate code",
      "   - Use scaffold as source of truth",
      "   - Do not change structure without updating scaffold",
      "",
      "All outputs go to .ui/runs/<timestamp>/ folder.",
      "Keep scaffolds in version control alongside implementation code."
    ]
  },
  "layout-solver": {
    "title": "Layout Solver Algorithm",
    "summary": "LUMA uses a headless layout engine to compute node frames and detect layout issues.",
    "details": [
      "The layout solver works in three stages:",
      "1. Measure Phase: Compute intrinsic sizes for all leaf nodes (Text, Button, Field)",
      "2. Layout Phase: Apply layout rules (Stack distributes along direction, Grid uses cells)",
      "3. Frame Assignment: Calculate final x, y, width, height for every node",
      "",
      "Stack layout distributes children along direction (horizontal/vertical) with gap spacing.",
      "Grid layout uses columns/rows with cell placement and responsive breakpoints.",
      "Box layout wraps a single child with padding.",
      "",
      "Issues detected:",
      "- overflow-x: Horizontal overflow beyond viewport",
      "- primary-below-fold: Primary action below viewport fold",
      "- spacing-off-scale: Inconsistent spacing values"
    ]
  },
  "keyboard-flow": {
    "title": "Keyboard Flow Analysis",
    "summary": "Tab sequence generation and flow validation for keyboard accessibility.",
    "details": [
      "Keyboard flow analysis includes:",
      "1. Pre-order traversal of the node tree",
      "2. Identification of focusable nodes (Button, Field)",
      "3. Tab sequence generation in tree order",
      "4. Detection of unreachable nodes",
      "",
      "Flow rules checked:",
      "- cancel-before-primary: Cancel/back button should not precede primary action",
      "- field-after-actions: Fields must appear before actions in Forms",
      "- unreachable: All focusable nodes must be in tab sequence",
      "",
      "For Forms, expected order is Fields → Actions per GOV.UK patterns."
    ]
  },
  "scoring": {
    "title": "Scoring System",
    "summary": "Weighted category scoring with pass/fail criteria.",
    "details": [
      "LUMA calculates 4 category scores (0-100):",
      "",
      "1. Pattern Fidelity (45% weight):",
      "   Formula: 100 - 30×MUST_failures - 10×SHOULD_failures",
      "",
      "2. Flow & Reachability (25% weight):",
      "   Formula: 100 - 30×unreachable_nodes - 10×warnings",
      "",
      "3. Hierarchy & Grouping (20% weight):",
      "   Formula: 100 - 10×structural_issues - 5×spacing_clusters",
      "",
      "4. Responsive Behavior (10% weight):",
      "   Formula: 100 - 30×overflow_errors - 20×below_fold_issues",
      "",
      "Overall = round(Σ weight × score)",
      "",
      "Pass criteria (all must be met):",
      "- No MUST pattern failures",
      "- No critical flow errors (unreachable nodes)",
      "- Overall score ≥ 85",
      "",
      "Custom weights can be provided via --weights JSON flag."
    ]
  },
  "overrides": {
    "title": "Responsive Overrides",
    "summary": "Viewport-specific property overrides for responsive design.",
    "details": [
      "Responsive overrides allow different values at different viewport widths.",
      "",
      "Format: node.overrides = [{ minWidth: 768, <properties> }]",
      "",
      "Override precedence:",
      "- Sorted by minWidth ascending",
      "- Last applicable override wins",
      "- Base properties used when no override matches",
      "",
      "Overridable properties:",
      "- Stack: direction, gap, padding",
      "- Grid: columns, gap",
      "- Text: fontSize",
      "- General: visible",
      "",
      "Example: Hide element on mobile, show on desktop",
      "  { visible: false, overrides: [{ minWidth: 1024, visible: true }] }"
    ]
  },
  "issue-fields": {
    "title": "Issue Structure",
    "summary": "Canonical issue format used across all LUMA outputs.",
    "details": [
      "Every issue has these fields:",
      "",
      "- id: Machine-readable identifier (e.g., 'overflow-x', 'field-has-label')",
      "- severity: 'error' (blocking), 'warn' (non-blocking), or 'info'",
      "- message: Human-readable description",
      "- nodeId: ID of the node with the issue",
      "- source: (optional) Attribution for pattern-based issues",
      "  - pattern: Pattern name (e.g., 'Form.Basic')",
      "  - name: Source name (e.g., 'GOV.UK Design System')",
      "  - url: Reference URL",
      "",
      "Severity levels:",
      "- error: Blocks pass criteria (MUST failures, critical flow errors)",
      "- warn: Reduces score but doesn't block (SHOULD failures, heuristic warnings)",
      "- info: Informational only"
    ]
  },
  "exit-codes": {
    "title": "Exit Codes",
    "summary": "Standard exit codes used by all LUMA commands.",
    "details": [
      "LUMA uses consistent exit codes:",
      "",
      "0 - SUCCESS",
      "  No blocking issues found",
      "  Scaffold passes all applicable checks",
      "",
      "2 - INVALID_INPUT",
      "  Schema validation failed",
      "  Malformed JSON or missing required fields",
      "",
      "3 - BLOCKING_ISSUES",
      "  MUST pattern failures",
      "  Critical flow errors (unreachable nodes)",
      "  Failing score (overall < 85)",
      "",
      "4 - INTERNAL_ERROR",
      "  Unexpected tool error",
      "  File I/O errors",
      "",
      "5 - VERSION_MISMATCH",
      "  Unsupported schemaVersion in scaffold",
      "  LUMA v1.0 only supports schemaVersion '1.0.0'"
    ]
  },
  "run-folders": {
    "title": "Run Folders",
    "summary": "Artifact organization in .ui/runs/ directories.",
    "details": [
      "LUMA writes all outputs to run folders:",
      "",
      "Location: .ui/runs/<timestamp>/",
      "Timestamp format: YYYYMMDD-HHMMSS-mmm (ISO-like)",
      "",
      "Standard artifacts:",
      "- ingest.json: Validation and normalization results",
      "- layout_<WxH>.json: Layout analysis per viewport (e.g., layout_375x667.json)",
      "- keyboard.json: Tab sequence and flow issues",
      "- flow.json: Pattern validation results",
      "- score.json: Aggregated scores and pass/fail",
      "",
      "Benefits:",
      "- Reproducible: All analysis outputs in one folder",
      "- Timestamped: Easy to track runs over time",
      "- Isolated: Each run is self-contained",
      "",
      "Workflow:",
      "1. Run analysis commands (ingest, layout, keyboard, flow)",
      "2. Artifacts accumulate in latest run folder",
      "3. Run 'luma score <run-dir>' to aggregate results"
    ]
  },
  "scaffold-contract": {
    "title": "Scaffold Contract",
    "summary": "Deterministic rules for generating valid LUMA scaffolds.",
    "details": [
      "You are producing a LUMA Component Scaffold JSON.",
      "",
      "Hard rules:",
      "- schemaVersion === \"1.0.0\"",
      "- screen.id is a non-empty string",
      "- screen.root is ONE node of type Stack|Grid|Box|Text|Button|Field|Form|Table",
      "- Every node has: id, type (and required fields for its type)",
      "- Form has fields[] (len ≥ 1) and actions[] (len ≥ 1)",
      "- Table has title (non-empty), columns[] (len ≥ 1), responsive.strategy ∈ {wrap, scroll, cards}",
      "- settings.spacingScale is an array of numbers",
      "- settings.minTouchTarget is { \"w\": 44, \"h\": 44 } or larger",
      "- settings.breakpoints are \"WxH\" strings, e.g. [\"320x640\",\"768x1024\"]",
      "",
      "Output MUST be a single JSON object. No comments. No markdown."
    ]
  },
  "golden-template": {
    "title": "Golden Template",
    "summary": "A pre-validated scaffold example for reference and base generation.",
    "details": [
      "The Golden Template is a minimal, valid scaffold that passes all LUMA validations.",
      "",
      "Location: templates/golden.todo.mock.json",
      "",
      "Structure:",
      "- Root: Stack (vertical, gap: 16, padding: 24)",
      "- Children:",
      "  - Text (title \"Todos\", fontSize: 24)",
      "  - Stack (horizontal toolbar with Button \"Add task\")",
      "  - Table (3 columns: Task, Status, Due Date)",
      "",
      "Table configuration:",
      "- responsive.strategy: \"scroll\"",
      "- minColumnWidth: 160",
      "",
      "Settings:",
      "- spacingScale: [4, 8, 12, 16, 24, 32]",
      "- minTouchTarget: { w: 44, h: 44 }",
      "- breakpoints: [\"320x640\", \"768x1024\", \"1280x800\"]",
      "",
      "Validation status:",
      "- Passes: luma ingest (exit 0)",
      "- Passes: luma layout --viewports 320x640 (no overflow or below-fold issues)",
      "- Passes: luma flow --patterns table (all MUST rules)",
      "",
      "Use this as:",
      "- A reference for valid scaffold structure",
      "- A starting point for new scaffolds",
      "- A validation baseline"
    ]
  },
  "component-text": {
    "title": "Text Component",
    "summary": "Display text content with optional styling and sizing.",
    "details": [
      "The Text component displays text content with configurable font size and layout policies.",
      "",
      "Properties:",
      "- id (string, required): Unique identifier for the component",
      "- type (string, required): Must be 'Text'",
      "- text (string, required): Content to display",
      "- fontSize (number, optional): Font size in pixels (default: 16)",
      "- maxLines (number, optional): Maximum number of lines before truncation",
      "- intrinsicTextWidth (number, optional): Single-line width hint for layout calculations",
      "- visible (boolean, optional): Visibility flag (default: true)",
      "- widthPolicy (string, optional): 'hug' | 'fill' | 'fixed' (default: 'hug')",
      "- heightPolicy (string, optional): 'hug' | 'fill' | 'fixed' (default: 'hug')",
      "- minSize (object, optional): Minimum size constraint {w?: number, h?: number}",
      "- maxSize (object, optional): Maximum size constraint {w?: number, h?: number}",
      "- at (object, optional): Responsive overrides keyed by '<=N' or '>=N'",
      "",
      "Common Mistakes:",
      "- Using 'content' instead of 'text' (use 'text')",
      "- Using 'label' instead of 'text' (use 'text')",
      "- Using 'fontWeight' (not supported, use fontSize only)",
      "- Forgetting to set 'text' property (it's required)",
      "",
      "Examples:",
      "",
      "Simple text:",
      "{\"id\":\"title\",\"type\":\"Text\",\"text\":\"Hello World\"}",
      "",
      "Styled heading:",
      "{\"id\":\"heading\",\"type\":\"Text\",\"text\":\"Welcome\",\"fontSize\":24}",
      "",
      "Truncated text:",
      "{\"id\":\"desc\",\"type\":\"Text\",\"text\":\"Long description...\",\"maxLines\":2}"
    ]
  },
  "component-button": {
    "title": "Button Component",
    "summary": "Interactive button element with optional text and role hint.",
    "details": [
      "The Button component creates focusable interactive elements with visual role hints.",
      "",
      "Properties:",
      "- id (string, required): Unique identifier for the component",
      "- type (string, required): Must be 'Button'",
      "- text (string, optional): Button label (if absent, treated as icon-only)",
      "- focusable (boolean, optional): Whether button can receive focus (default: true)",
      "- tabIndex (number, optional): Tab order index (non-zero values discouraged)",
      "- roleHint (string, optional): 'primary' | 'secondary' | 'danger' | 'link'",
      "- visible (boolean, optional): Visibility flag (default: true)",
      "- widthPolicy (string, optional): 'hug' | 'fill' | 'fixed' (default: 'hug')",
      "- heightPolicy (string, optional): 'hug' | 'fill' | 'fixed' (default: 'hug')",
      "- minSize (object, optional): Minimum size constraint {w?: number, h?: number}",
      "- maxSize (object, optional): Maximum size constraint {w?: number, h?: number}",
      "- at (object, optional): Responsive overrides keyed by '<=N' or '>=N'",
      "",
      "RoleHint Values:",
      "- 'primary': Main call-to-action (submit, save, continue)",
      "- 'secondary': Alternative actions (cancel, back)",
      "- 'danger': Destructive actions (delete, remove)",
      "- 'link': Link-style buttons (less visual weight)",
      "",
      "Common Mistakes:",
      "- Using 'label' instead of 'text' (use 'text')",
      "- Using 'variant' instead of 'roleHint' (use 'roleHint')",
      "- Setting non-zero tabIndex (use default tab order)",
      "- Forgetting 'text' for visible buttons (icon-only should be intentional)",
      "",
      "Examples:",
      "",
      "Primary button:",
      "{\"id\":\"submit-btn\",\"type\":\"Button\",\"text\":\"Submit\",\"roleHint\":\"primary\"}",
      "",
      "Secondary button:",
      "{\"id\":\"cancel-btn\",\"type\":\"Button\",\"text\":\"Cancel\",\"roleHint\":\"secondary\"}",
      "",
      "Danger button:",
      "{\"id\":\"delete-btn\",\"type\":\"Button\",\"text\":\"Delete\",\"roleHint\":\"danger\"}"
    ]
  },
  "component-table": {
    "title": "Table Component",
    "summary": "Data table with responsive behavior and column configuration.",
    "details": [
      "The Table component displays tabular data with configurable responsive strategies.",
      "",
      "Properties:",
      "- id (string, required): Unique identifier for the component",
      "- type (string, required): Must be 'Table'",
      "- title (string, required): Table title (must be non-empty)",
      "- columns (array, required): Array of column names as strings (length ≥ 1)",
      "- rows (number, optional): Number of rows (density heuristic)",
      "- responsive (object, required): Configuration with 'strategy' and optional 'minColumnWidth'",
      "- states (array, optional): Table states (e.g., 'default', 'empty', 'loading')",
      "- visible (boolean, optional): Visibility flag (default: true)",
      "- widthPolicy (string, optional): 'hug' | 'fill' | 'fixed' (default: 'hug')",
      "- heightPolicy (string, optional): 'hug' | 'fill' | 'fixed' (default: 'hug')",
      "- minSize (object, optional): Minimum size constraint {w?: number, h?: number}",
      "- maxSize (object, optional): Maximum size constraint {w?: number, h?: number}",
      "- at (object, optional): Responsive overrides keyed by '<=N' or '>=N'",
      "",
      "Responsive Strategies:",
      "- 'wrap': Columns wrap to multiple lines on narrow viewports",
      "- 'scroll': Table scrolls horizontally when too wide",
      "- 'cards': Each row becomes a card on mobile",
      "",
      "Columns Array Format:",
      "- Must be array of strings (not objects)",
      "- Example: [\"Name\", \"Email\", \"Role\"]",
      "- Minimum 1 column required",
      "",
      "Common Mistakes:",
      "- Using object array for columns instead of string array",
      "- Empty columns array (must have at least 1 column)",
      "- Empty title string (must be non-empty)",
      "- Missing 'responsive' configuration",
      "- Invalid responsive.strategy (must be 'wrap' | 'scroll' | 'cards')",
      "",
      "Examples:",
      "",
      "Simple table with scroll:",
      "{\"id\":\"users-table\",\"type\":\"Table\",\"title\":\"Users\",\"columns\":[\"Name\",\"Email\",\"Role\"],\"rows\":5,\"responsive\":{\"strategy\":\"scroll\"}}",
      "",
      "Responsive table with card view:",
      "{\"id\":\"products-table\",\"type\":\"Table\",\"title\":\"Products\",\"columns\":[\"Product\",\"Price\",\"Stock\"],\"responsive\":{\"strategy\":\"cards\",\"minColumnWidth\":120},\"states\":[\"default\",\"empty\"]}"
    ]
  },
  "component-form": {
    "title": "Form Component",
    "summary": "Form container with fields and action buttons.",
    "details": [
      "The Form component organizes input fields and action buttons with state management.",
      "",
      "Properties:",
      "- id (string, required): Unique identifier for the component",
      "- type (string, required): Must be 'Form'",
      "- title (string, optional): Optional form title",
      "- fields (array, required): Array of Field components (length ≥ 1)",
      "- actions (array, required): Array of Button components (length ≥ 1)",
      "- states (array, required): Form states (must include 'default', include 'error' if any field has errorText)",
      "- visible (boolean, optional): Visibility flag (default: true)",
      "- widthPolicy (string, optional): 'hug' | 'fill' | 'fixed' (default: 'hug')",
      "- heightPolicy (string, optional): 'hug' | 'fill' | 'fixed' (default: 'hug')",
      "- minSize (object, optional): Minimum size constraint {w?: number, h?: number}",
      "- maxSize (object, optional): Maximum size constraint {w?: number, h?: number}",
      "- at (object, optional): Responsive overrides keyed by '<=N' or '>=N'",
      "",
      "Fields Array Format:",
      "- Must be array of Field objects (not simple values)",
      "- Each field must have: id, type: 'Field', label",
      "- Example: [{\"id\":\"email\",\"type\":\"Field\",\"label\":\"Email\",\"inputType\":\"email\"}]",
      "",
      "Actions Array Format:",
      "- Must be array of Button objects",
      "- Typically includes submit button with roleHint: 'primary'",
      "- Example: [{\"id\":\"submit\",\"type\":\"Button\",\"text\":\"Submit\",\"roleHint\":\"primary\"}]",
      "",
      "States Array:",
      "- Must always include 'default'",
      "- Include 'error' if any field has errorText property",
      "- Example: [\"default\"] or [\"default\", \"error\"]",
      "",
      "Common Mistakes:",
      "- Empty fields array (must have at least 1 field)",
      "- Empty actions array (must have at least 1 button)",
      "- Missing 'default' in states array",
      "- Having errorText in fields but not including 'error' in states",
      "- Using object instead of array for fields or actions",
      "",
      "Examples:",
      "",
      "Login form:",
      "{\"id\":\"login-form\",\"type\":\"Form\",\"states\":[\"default\"],\"fields\":[{\"id\":\"email-field\",\"type\":\"Field\",\"label\":\"Email\",\"inputType\":\"email\",\"required\":true},{\"id\":\"password-field\",\"type\":\"Field\",\"label\":\"Password\",\"inputType\":\"password\",\"required\":true}],\"actions\":[{\"id\":\"submit-button\",\"type\":\"Button\",\"text\":\"Login\",\"roleHint\":\"primary\"}]}"
    ]
  },
  "component-field": {
    "title": "Field Component",
    "summary": "Form input field with label, optional type and helper/error text.",
    "details": [
      "The Field component represents a single form input with a required label and optional validation metadata.",
      "",
      "Properties:",
      "- id (string, required): Unique identifier",
      "- type (string, required): Must be 'Field'",
      "- label (string, required): Visible label text (non-empty)",
      "- inputType (string, optional): 'text' | 'email' | 'password' | 'number' | 'date' (default: 'text')",
      "- required (boolean, optional): Marks field as mandatory",
      "- helpText (string, optional): Helper guidance below field",
      "- errorText (string, optional): Error message (include 'error' state in Form.states if used)",
      "- focusable (boolean, optional): Focus participation (default: true)",
      "- visible (boolean, optional): Visibility flag (default: true)",
      "- widthPolicy (string, optional): 'hug' | 'fill' | 'fixed' (default: 'hug')",
      "- heightPolicy (string, optional): 'hug' | 'fill' | 'fixed' (default: 'hug')",
      "- minSize (object, optional): Minimum size {w?: number, h?: number}",
      "- maxSize (object, optional): Maximum size {w?: number, h?: number}",
      "- at (object, optional): Responsive overrides keyed by '<=N' or '>=N'",
      "",
      "Common Mistakes:",
      "- Using 'placeholder' instead of 'label' (label required)",
      "- Empty label string",
      "- Invalid inputType value (must be supported enum)",
      "- Adding errorText without 'error' state in parent Form",
      "",
      "Examples:",
      "Email field (required):",
      "{\"id\":\"email\",\"type\":\"Field\",\"label\":\"Email\",\"inputType\":\"email\",\"required\":true,\"helpText\":\"We'll never share your email\"}",
      "Password field with helper text:",
      "{\"id\":\"password\",\"type\":\"Field\",\"label\":\"Password\",\"inputType\":\"password\",\"required\":true,\"helpText\":\"At least 8 characters\"}",
      "Optional text field:",
      "{\"id\":\"nickname\",\"type\":\"Field\",\"label\":\"Nickname\"}"
    ]
  },
  "component-box": {
    "title": "Box Component",
    "summary": "Single-child container applying padding and sizing policies.",
    "details": [
      "The Box component wraps exactly one child node providing padding and sizing constraints.",
      "",
      "Properties:",
      "- id (string, required): Unique identifier",
      "- type (string, required): Must be 'Box'",
      "- padding (number, optional): Internal padding in pixels (default: 0)",
      "- child (object, optional): Single child component (any node type)",
      "- visible (boolean, optional): Visibility flag (default: true)",
      "- widthPolicy (string, optional): 'hug' | 'fill' | 'fixed' (default: 'hug')",
      "- heightPolicy (string, optional): 'hug' | 'fill' | 'fixed' (default: 'hug')",
      "- minSize (object, optional): Minimum size {w?: number, h?: number}",
      "- maxSize (object, optional): Maximum size {w?: number, h?: number}",
      "- at (object, optional): Responsive overrides keyed by '<=N' or '>=N'",
      "",
      "Common Mistakes:",
      "- Using 'children' array instead of 'child' (Box only supports single child)",
      "- Nested Box without padding (add padding or use Stack/Grid if multiple children)",
      "- Using Box where Stack would better express multiple siblings",
      "",
      "Examples:",
      "Padded text container:",
      "{\"id\":\"padded\",\"type\":\"Box\",\"padding\":16,\"child\":{\"id\":\"title\",\"type\":\"Text\",\"text\":\"Hello\"}}",
      "Card with vertical layout:",
      "{\"id\":\"card\",\"type\":\"Box\",\"padding\":16,\"child\":{\"id\":\"card-stack\",\"type\":\"Stack\",\"direction\":\"vertical\",\"gap\":8,\"children\":[{\"id\":\"card-title\",\"type\":\"Text\",\"text\":\"Card Title\",\"fontSize\":18},{\"id\":\"card-desc\",\"type\":\"Text\",\"text\":\"Description\"}]}}"
    ]
  },
  "component-stack": {
    "title": "Stack Component",
    "summary": "Linear layout container arranging children vertically or horizontally.",
    "details": [
      "The Stack component arranges child components in a single direction with spacing.",
      "",
      "Properties:",
      "- id (string, required): Unique identifier for the component",
      "- type (string, required): Must be 'Stack'",
      "- direction (string, required): Layout direction - 'vertical' | 'horizontal'",
      "- gap (number, optional): Space between children in pixels (default: 0)",
      "- padding (number, optional): Internal padding in pixels (default: 0)",
      "- align (string, optional): Cross-axis alignment - 'start' | 'center' | 'end' | 'stretch' (default: 'start')",
      "- wrap (boolean, optional): Allow wrapping (only applies to horizontal, default: false)",
      "- children (array, required): Array of child components (any node type)",
      "- visible (boolean, optional): Visibility flag (default: true)",
      "- widthPolicy (string, optional): 'hug' | 'fill' | 'fixed' (default: 'hug')",
      "- heightPolicy (string, optional): 'hug' | 'fill' | 'fixed' (default: 'hug')",
      "- minSize (object, optional): Minimum size constraint {w?: number, h?: number}",
      "- maxSize (object, optional): Maximum size constraint {w?: number, h?: number}",
      "- at (object, optional): Responsive overrides keyed by '<=N' or '>=N'",
      "",
      "Direction Property:",
      "- 'vertical': Stack children top to bottom",
      "- 'horizontal': Stack children left to right",
      "",
      "Gap and Padding:",
      "- gap: Space between children (not at edges)",
      "- padding: Space inside the Stack around all children",
      "- Use values from settings.spacingScale for consistency",
      "",
      "Common Mistakes:",
      "- Missing direction property (required)",
      "- Empty children array (must have at least 1 child)",
      "- Using 'wrap' with vertical direction (only works with horizontal)",
      "- Forgetting to set gap for spacing between items",
      "",
      "Examples:",
      "",
      "Vertical stack:",
      "{\"id\":\"v-stack\",\"type\":\"Stack\",\"direction\":\"vertical\",\"gap\":16,\"children\":[{\"id\":\"text1\",\"type\":\"Text\",\"text\":\"First item\"},{\"id\":\"text2\",\"type\":\"Text\",\"text\":\"Second item\"}]}",
      "",
      "Horizontal toolbar:",
      "{\"id\":\"toolbar\",\"type\":\"Stack\",\"direction\":\"horizontal\",\"gap\":8,\"padding\":12,\"children\":[{\"id\":\"btn1\",\"type\":\"Button\",\"text\":\"Save\"},{\"id\":\"btn2\",\"type\":\"Button\",\"text\":\"Cancel\"}]}"
    ]
  },
  "component-grid": {
    "title": "Grid Component",
    "summary": "Grid layout container with automatic responsive columns.",
    "details": [
      "The Grid component arranges children in a multi-column grid with responsive behavior.",
      "",
      "Properties:",
      "- id (string, required): Unique identifier for the component",
      "- type (string, required): Must be 'Grid'",
      "- columns (number, required): Intended maximum number of columns",
      "- gap (number, optional): Space between grid items in pixels (default: 0)",
      "- minColWidth (number, optional): Minimum column width - allows column reduction on small viewports",
      "- children (array, required): Array of child components (any node type)",
      "- visible (boolean, optional): Visibility flag (default: true)",
      "- widthPolicy (string, optional): 'hug' | 'fill' | 'fixed' (default: 'hug')",
      "- heightPolicy (string, optional): 'hug' | 'fill' | 'fixed' (default: 'hug')",
      "- minSize (object, optional): Minimum size constraint {w?: number, h?: number}",
      "- maxSize (object, optional): Maximum size constraint {w?: number, h?: number}",
      "- at (object, optional): Responsive overrides keyed by '<=N' or '>=N'",
      "",
      "Columns Property:",
      "- Specifies maximum number of columns",
      "- Grid may use fewer columns on narrow viewports if minColWidth is set",
      "- Must be a positive number",
      "",
      "Responsive Behavior:",
      "- Set minColWidth to enable automatic column reduction",
      "- Grid calculates actual columns: floor(viewport_width / minColWidth)",
      "- Example: 4 columns with minColWidth:150 becomes 2 columns on 320px viewport",
      "",
      "Gap Property:",
      "- Space between grid items (both horizontal and vertical)",
      "- Use values from settings.spacingScale for consistency",
      "",
      "Common Mistakes:",
      "- Missing columns property (required)",
      "- Empty children array (must have at least 1 child)",
      "- Setting columns to 0 or negative value",
      "- Not using minColWidth for responsive behavior",
      "",
      "Examples:",
      "",
      "Simple 2-column grid:",
      "{\"id\":\"grid\",\"type\":\"Grid\",\"columns\":2,\"gap\":16,\"children\":[{\"id\":\"item1\",\"type\":\"Text\",\"text\":\"Item 1\"},{\"id\":\"item2\",\"type\":\"Text\",\"text\":\"Item 2\"},{\"id\":\"item3\",\"type\":\"Text\",\"text\":\"Item 3\"}]}",
      "",
      "Responsive 4-column grid:",
      "{\"id\":\"responsive-grid\",\"type\":\"Grid\",\"columns\":4,\"gap\":12,\"minColWidth\":150,\"children\":[{\"id\":\"card1\",\"type\":\"Box\",\"padding\":16,\"child\":{\"id\":\"card1-text\",\"type\":\"Text\",\"text\":\"Card 1\"}}]}"
    ]
  },
  "snippets": {
    "title": "LUMA Snippets",
    "summary": "Reusable JSON component fragments for rapid scaffold composition.",
    "details": [
      "LUMA v1.1+ includes a snippets library for common UI patterns.",
      "",
      "Available Snippets:",
      "",
      "1. stack.vertical",
      "   - Vertical stack container with standard 16px gap",
      "   - Use for vertical layouts, forms, content sections",
      "   - File: snippets/stack.vertical.json",
      "",
      "2. stack.horizontal.toolbar",
      "   - Horizontal toolbar with 8px gap and center alignment",
      "   - Use for action bars, navigation, button groups",
      "   - File: snippets/stack.horizontal.toolbar.json",
      "",
      "3. form.basic",
      "   - Complete form with name and email fields",
      "   - Includes submit (primary) and cancel (secondary) buttons",
      "   - Ready to customize by adding/removing fields",
      "   - File: snippets/form.basic.json",
      "",
      "4. table.simple",
      "   - Data table with 3 columns and scroll strategy",
      "   - Includes default and empty states",
      "   - File: snippets/table.simple.json",
      "",
      "5. button.primary",
      "   - Primary action button with roleHint",
      "   - File: snippets/button.primary.json",
      "",
      "6. field.email",
      "   - Email input field with validation and help text",
      "   - File: snippets/field.email.json",
      "",
      "Usage:",
      "- Copy snippet JSON into your scaffold",
      "- Modify id to ensure uniqueness",
      "- Adjust properties (text, labels, etc.) as needed",
      "- Combine multiple snippets to build complex UIs",
      "",
      "Tips:",
      "- Use luma scaffold new to generate scaffolds with snippets",
      "- Snippets follow best practices and pass validation",
      "- Customize gap/padding values to match your design system",
      "- Reference snippets/index.json for full catalog",
      "",
      "Example Workflow:",
      "1. Start with stack.vertical as root container",
      "2. Add form.basic for user input section",
      "3. Add table.simple for data display",
      "4. Validate with: luma ingest your-scaffold.json",
      "",
      "All snippets are located in the snippets/ directory.",
      "See snippets/index.json for detailed metadata and examples."
    ]
  }
}
