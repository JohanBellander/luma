{
  "workflow": {
    "title": "LUMA Workflow",
    "summary": "Step-by-step process for designing and validating UI scaffolds.",
    "details": [
      "LUMA enforces a scaffold-first design workflow:",
      "",
      "1. Design Phase:",
      "   - Create UI structure as JSON scaffold (no code yet)",
      "   - Use Stack, Grid, Form, Table, Button, Field, Text nodes",
      "   - Define responsive overrides for different viewports",
      "",
      "2. Validation Phase:",
      "   - Run: luma ingest scaffold.json (validate structure)",
      "   - Run: luma layout scaffold.json --viewports 320x640,768x1024,1920x1080",
      "   - Run: luma keyboard scaffold.json (check tab flow)",
      "   - Run: luma flow scaffold.json --patterns form,table (validate UX patterns)",
      "",
      "3. Scoring Phase:",
      "   - Run: luma score .ui/runs/<run-id>",
      "   - Check overall score >= 85",
      "   - Verify no MUST pattern failures",
      "   - Verify no unreachable nodes",
      "",
      "4. Review Phase:",
      "   - Run: luma report .ui/runs/<run-id> (generate HTML report)",
      "   - Review issues and refine scaffold",
      "   - Re-run validation until passing",
      "",
      "5. Implementation Phase:",
      "   - Only after scaffold passes, generate code",
      "   - Use scaffold as source of truth",
      "   - Do not change structure without updating scaffold",
      "",
      "All outputs go to .ui/runs/<timestamp>/ folder.",
      "Keep scaffolds in version control alongside implementation code."
    ]
  },
  "layout-solver": {
    "title": "Layout Solver Algorithm",
    "summary": "LUMA uses a headless layout engine to compute node frames and detect layout issues.",
    "details": [
      "The layout solver works in three stages:",
      "1. Measure Phase: Compute intrinsic sizes for all leaf nodes (Text, Button, Field)",
      "2. Layout Phase: Apply layout rules (Stack distributes along direction, Grid uses cells)",
      "3. Frame Assignment: Calculate final x, y, width, height for every node",
      "",
      "Stack layout distributes children along direction (horizontal/vertical) with gap spacing.",
      "Grid layout uses columns/rows with cell placement and responsive breakpoints.",
      "Box layout wraps a single child with padding.",
      "",
      "Issues detected:",
      "- overflow-x: Horizontal overflow beyond viewport",
      "- primary-below-fold: Primary action below viewport fold",
      "- spacing-off-scale: Inconsistent spacing values"
    ]
  },
  "keyboard-flow": {
    "title": "Keyboard Flow Analysis",
    "summary": "Tab sequence generation and flow validation for keyboard accessibility.",
    "details": [
      "Keyboard flow analysis includes:",
      "1. Pre-order traversal of the node tree",
      "2. Identification of focusable nodes (Button, Field)",
      "3. Tab sequence generation in tree order",
      "4. Detection of unreachable nodes",
      "",
      "Flow rules checked:",
      "- cancel-before-primary: Cancel/back button should not precede primary action",
      "- field-after-actions: Fields must appear before actions in Forms",
      "- unreachable: All focusable nodes must be in tab sequence",
      "",
      "For Forms, expected order is Fields → Actions per GOV.UK patterns."
    ]
  },
  "scoring": {
    "title": "Scoring System",
    "summary": "Weighted category scoring with pass/fail criteria.",
    "details": [
      "LUMA calculates 4 category scores (0-100):",
      "",
      "1. Pattern Fidelity (45% weight):",
      "   Formula: 100 - 30×MUST_failures - 10×SHOULD_failures",
      "",
      "2. Flow & Reachability (25% weight):",
      "   Formula: 100 - 30×unreachable_nodes - 10×warnings",
      "",
      "3. Hierarchy & Grouping (20% weight):",
      "   Formula: 100 - 10×structural_issues - 5×spacing_clusters",
      "",
      "4. Responsive Behavior (10% weight):",
      "   Formula: 100 - 30×overflow_errors - 20×below_fold_issues",
      "",
      "Overall = round(Σ weight × score)",
      "",
      "Pass criteria (all must be met):",
      "- No MUST pattern failures",
      "- No critical flow errors (unreachable nodes)",
      "- Overall score ≥ 85",
      "",
      "Custom weights can be provided via --weights JSON flag."
    ]
  },
  "overrides": {
    "title": "Responsive Overrides",
    "summary": "Viewport-specific property overrides for responsive design.",
    "details": [
      "Responsive overrides allow different values at different viewport widths.",
      "",
      "Format: node.overrides = [{ minWidth: 768, <properties> }]",
      "",
      "Override precedence:",
      "- Sorted by minWidth ascending",
      "- Last applicable override wins",
      "- Base properties used when no override matches",
      "",
      "Overridable properties:",
      "- Stack: direction, gap, padding",
      "- Grid: columns, gap",
      "- Text: fontSize",
      "- General: visible",
      "",
      "Example: Hide element on mobile, show on desktop",
      "  { visible: false, overrides: [{ minWidth: 1024, visible: true }] }"
    ]
  },
  "issue-fields": {
    "title": "Issue Structure",
    "summary": "Canonical issue format used across all LUMA outputs.",
    "details": [
      "Every issue has these fields:",
      "",
      "- id: Machine-readable identifier (e.g., 'overflow-x', 'field-has-label')",
      "- severity: 'error' (blocking), 'warn' (non-blocking), or 'info'",
      "- message: Human-readable description",
      "- nodeId: ID of the node with the issue",
      "- source: (optional) Attribution for pattern-based issues",
      "  - pattern: Pattern name (e.g., 'Form.Basic')",
      "  - name: Source name (e.g., 'GOV.UK Design System')",
      "  - url: Reference URL",
      "",
      "Severity levels:",
      "- error: Blocks pass criteria (MUST failures, critical flow errors)",
      "- warn: Reduces score but doesn't block (SHOULD failures, heuristic warnings)",
      "- info: Informational only"
    ]
  },
  "exit-codes": {
    "title": "Exit Codes",
    "summary": "Standard exit codes used by all LUMA commands.",
    "details": [
      "LUMA uses consistent exit codes:",
      "",
      "0 - SUCCESS",
      "  No blocking issues found",
      "  Scaffold passes all applicable checks",
      "",
      "2 - INVALID_INPUT",
      "  Schema validation failed",
      "  Malformed JSON or missing required fields",
      "",
      "3 - BLOCKING_ISSUES",
      "  MUST pattern failures",
      "  Critical flow errors (unreachable nodes)",
      "  Failing score (overall < 85)",
      "",
      "4 - INTERNAL_ERROR",
      "  Unexpected tool error",
      "  File I/O errors",
      "",
      "5 - VERSION_MISMATCH",
      "  Unsupported schemaVersion in scaffold",
      "  LUMA v1.0 only supports schemaVersion '1.0.0'"
    ]
  },
  "run-folders": {
    "title": "Run Folders",
    "summary": "Artifact organization in .ui/runs/ directories.",
    "details": [
      "LUMA writes all outputs to run folders:",
      "",
      "Location: .ui/runs/<timestamp>/",
      "Timestamp format: YYYYMMDD-HHMMSS-mmm (ISO-like)",
      "",
      "Standard artifacts:",
      "- ingest.json: Validation and normalization results",
      "- layout_<WxH>.json: Layout analysis per viewport (e.g., layout_375x667.json)",
      "- keyboard.json: Tab sequence and flow issues",
      "- flow.json: Pattern validation results",
      "- score.json: Aggregated scores and pass/fail",
      "",
      "Benefits:",
      "- Reproducible: All analysis outputs in one folder",
      "- Timestamped: Easy to track runs over time",
      "- Isolated: Each run is self-contained",
      "",
      "Workflow:",
      "1. Run analysis commands (ingest, layout, keyboard, flow)",
      "2. Artifacts accumulate in latest run folder",
      "3. Run 'luma score <run-dir>' to aggregate results"
    ]
  },
  "scaffold-contract": {
    "title": "Scaffold Contract",
    "summary": "Deterministic rules for generating valid LUMA scaffolds.",
    "details": [
      "You are producing a LUMA Component Scaffold JSON.",
      "",
      "Hard rules:",
      "- schemaVersion === \"1.0.0\"",
      "- screen.id is a non-empty string",
      "- screen.root is ONE node of type Stack|Grid|Box|Text|Button|Field|Form|Table",
      "- Every node has: id, type (and required fields for its type)",
      "- Form has fields[] (len ≥ 1) and actions[] (len ≥ 1)",
      "- Table has title (non-empty), columns[] (len ≥ 1), responsive.strategy ∈ {wrap, scroll, cards}",
      "- settings.spacingScale is an array of numbers",
      "- settings.minTouchTarget is { \"w\": 44, \"h\": 44 } or larger",
      "- settings.breakpoints are \"WxH\" strings, e.g. [\"320x640\",\"768x1024\"]",
      "",
      "Output MUST be a single JSON object. No comments. No markdown."
    ]
  }
}
