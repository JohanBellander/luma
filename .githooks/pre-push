#!/bin/sh
# Auto-increment patch version on push
# This wrapper calls the PowerShell script on Windows

if command -v pwsh > /dev/null 2>&1; then
  # Use PowerShell 7+ if available
  pwsh -NoProfile -ExecutionPolicy Bypass -File "$(dirname "$0")/pre-push.ps1"
elif command -v powershell > /dev/null 2>&1; then
  # Fall back to Windows PowerShell
  powershell -NoProfile -ExecutionPolicy Bypass -File "$(dirname "$0")/pre-push.ps1"
else
  # Fallback for Unix systems
  echo "ðŸ“¦ Auto-incrementing patch version..."
  
  # Get current version
  CURRENT_VERSION=$(node -p "require('./package.json').version" 2>/dev/null)
  if [ -z "$CURRENT_VERSION" ]; then
    exit 0
  fi
  
  # Check if version was manually changed
  STAGED_VERSION=$(git show HEAD:package.json 2>/dev/null | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf-8')).version" 2>/dev/null || echo "$CURRENT_VERSION")
  
  if [ "$CURRENT_VERSION" = "$STAGED_VERSION" ]; then
    # Split and increment
    MAJOR=$(echo "$CURRENT_VERSION" | cut -d. -f1)
    MINOR=$(echo "$CURRENT_VERSION" | cut -d. -f2)
    PATCH=$(echo "$CURRENT_VERSION" | cut -d. -f3)
    NEW_PATCH=$((PATCH + 1))
    NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
    
    echo "ðŸ“¦ Auto-incrementing version: $CURRENT_VERSION â†’ $NEW_VERSION"
    
    # Update package.json
    node -e "
      const fs = require('fs');
      const pkg = JSON.parse(fs.readFileSync('package.json', 'utf-8'));
      pkg.version = '$NEW_VERSION';
      fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
    "
    
    # Stage and amend
    git add package.json
    git commit --amend --no-edit --no-verify
    
    echo "âœ“ Version bumped to $NEW_VERSION"
  fi
fi

exit 0

