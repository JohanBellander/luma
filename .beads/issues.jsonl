{"id":"LUMA-1","title":"LUMA v1.0 Implementation","description":"","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-27T13:15:47.8824266+01:00","updated_at":"2025-10-27T13:15:47.8824266+01:00"}
{"id":"LUMA-10","title":"Phase 7: Scoring System","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-27T13:19:39.4490089+01:00","updated_at":"2025-10-27T13:19:39.4490089+01:00"}
{"id":"LUMA-2","title":"Phase 1: Project Setup \u0026 Core Types","description":"Establish project foundation, tooling, and type system.\n\nDeliverables:\n1. Project Scaffolding\n   - Initialize npm/package.json with TypeScript, Commander.js, Vitest, Zod\n   - Configure TypeScript (tsconfig.json - strict mode, ES2022 target)\n   - Set up build scripts (tsc + esbuild)\n   - Configure ESLint + Prettier\n   - Set up Vitest test runner\n\n2. Type Definitions (src/types/)\n   - scaffold.ts - Complete Scaffold JSON types (schemaVersion, screen, settings)\n   - node.ts - All node type interfaces (Stack, Grid, Box, Text, Button, Field, Form, Table)\n   - issue.ts - Canonical Issue object shape (id, severity, message, nodeId, jsonPointer, viewport, details, source, suggestion)\n   - viewport.ts - Viewport \u0026 Frame types\n   - pattern.ts - Pattern rule types (MUST/SHOULD)\n   - output.ts - Command output types\n\n3. Utilities (src/utils/)\n   - run-folder.ts - Run folder management (timestamp generation, path creation for .ui/runs/\u003ctimestamp\u003e/)\n   - exit-codes.ts - Exit code constants (0=success, 2=invalid, 3=blocking, 4=internal, 5=version)\n   - json-pointer.ts - JSON pointer utilities for issue reporting\n   - logger.ts - Simple logging utility\n\nExit Criteria:\n npm run build compiles successfully\n npm test runs (even with no tests yet)\n All types exported and linted\n Run folder creation works\n\nEstimated: 3-5 days","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-27T13:15:57.1386044+01:00","updated_at":"2025-10-27T13:16:16.2806266+01:00","dependencies":[{"issue_id":"LUMA-2","depends_on_id":"LUMA-1","type":"blocks","created_at":"2025-10-27T13:15:57.1401992+01:00","created_by":"daemon"}]}
{"id":"LUMA-3","title":"Phase 2: Ingest Command Implementation","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-27T13:16:21.3912278+01:00","updated_at":"2025-10-27T13:16:21.3912278+01:00"}
{"id":"LUMA-4","title":"Phase 2: Ingest Command Implementation","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-27T13:16:26.0068269+01:00","updated_at":"2025-10-27T13:16:26.0068269+01:00"}
{"id":"LUMA-5","title":"Phase 2: Ingest Command Implementation","description":"Implement scaffold validation and normalization.\n\nDeliverables:\n1. Schema Validation (src/core/ingest/)\n   - validator.ts - Zod schemas for all node types\n   - schema-version.ts - Version check (support 1.0.0)\n   - normalize.ts - Apply defaults\n\n2. Ingest Logic\n   - ingest.ts - Main orchestrator\n   - Validate required fields\n   - Check node ID uniqueness\n   - Validate enums\n   - Emit errors/warnings as Issue objects\n\n3. CLI Command (src/cli/)\n   - ingest.command.ts - Commander.js command\n   - File reading, JSON parsing\n   - Write ingest.json to run folder\n   - Exit codes: 0, 2, 5\n\n4. Tests (tests/unit/ingest/)\n   - Valid scaffold passes\n   - Invalid schemaVersion detection\n   - Missing required fields\n   - Unknown fields ignored\n   - Duplicate node IDs\n   - Coverage  80%\n\nExit: luma ingest works, all spec rules enforced\nTime: 3-4 days","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-27T13:16:28.6455193+01:00","updated_at":"2025-10-27T13:17:30.6625555+01:00","dependencies":[{"issue_id":"LUMA-5","depends_on_id":"LUMA-2","type":"blocks","created_at":"2025-10-27T13:17:44.5666306+01:00","created_by":"daemon"}]}
{"id":"LUMA-6","title":"Phase 3: Responsive Override System","description":"Implement responsive override application logic per spec Section 3.4.\n\nDeliverables:\n1. Override Engine (src/core/layout/)\n   - responsive.ts - Parse at keys, apply overrides\n   - Implement normative algorithm: collect \u003e=X where XW in ascending order, \u003c=Y where YW in descending order\n   - Shallow merge objects, replace arrays\n   - Handle nested overrides correctly\n\n2. Tests (tests/unit/layout/)\n   - Override at \u003e=320 applied correctly\n   - Override at \u003c=768 applied correctly\n   - Multiple overrides in correct order\n   - Nested object merging\n   - Array replacement\n   - Coverage  90%\n\nExit: Override algorithm deterministic, matches spec exactly\nTime: 2-3 days","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-27T13:17:48.3402983+01:00","updated_at":"2025-10-27T13:17:59.8530696+01:00","dependencies":[{"issue_id":"LUMA-6","depends_on_id":"LUMA-5","type":"blocks","created_at":"2025-10-27T13:18:03.7535832+01:00","created_by":"daemon"}]}
{"id":"LUMA-7","title":"Phase 4: Headless Layout Engine","description":"Implement layout simulation and frame computation per spec Section 5.\n\nDeliverables:\n1. Layout Primitives (src/core/layout/)\n   - measure.ts - Text, Button, Field, Table measurement\n   - Text: fontSize*0.55*charCount, line wrapping at 1.4 line height\n   - Button/Field: respect minTouchTarget (default 44x44)\n   - Table: header 48 + rowHeight*rows\n\n2. Container Layout\n   - stack.ts - Vertical/horizontal with gap/padding/align/wrap\n   - grid.ts - Grid with column reduction (minColWidth logic)\n   - box.ts - Simple box with padding\n   - Alignment: start, center, end, stretch\n\n3. Layout Orchestrator\n   - layout.ts - Main engine, pre-order traversal\n   - Frame computation {x,y,w,h} per node\n   - Issue detection: overflow-x, spacing-off-scale, touch-target-too-small, primary-below-fold\n\n4. CLI Command\n   - layout.command.ts - Parse --viewports, run per viewport\n   - Write layout_WxH.json per viewport\n   - Exit 3 if blocking issues\n\n5. Tests (tests/unit/layout/)\n   - Stack layouts, Grid column reduction\n   - Overflow detection, Primary below fold\n   - Spacing validation\n   - Coverage  85%\n\nExit: luma layout works, frames correct per spec\nTime: 4-5 days","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-27T13:18:08.0066034+01:00","updated_at":"2025-10-27T13:18:37.1443286+01:00","dependencies":[{"issue_id":"LUMA-7","depends_on_id":"LUMA-6","type":"blocks","created_at":"2025-10-27T13:18:41.6965354+01:00","created_by":"daemon"}]}
{"id":"LUMA-8","title":"Phase 5: Keyboard Flow Analysis","description":"Implement keyboard tab sequence and flow validation per spec Section 6.\n\nDeliverables:\n1. Keyboard Flow Engine (src/core/keyboard/)\n   - traversal.ts - Pre-order tree traversal\n   - focusable.ts - Identify Button, Field, focusable:true nodes\n   - sequence.ts - Build tab sequence\n   - flow-rules.ts - Detect cancel-before-primary, field-after-actions\n\n2. Form-Specific Logic\n   - Validate fields before actions\n   - Action group analysis\n   - Unreachable node detection (critical)\n\n3. CLI Command\n   - keyboard.command.ts - Generate keyboard.json\n   - Optional --state parameter\n   - Exit 3 if critical flow errors\n\n4. Tests (tests/unit/keyboard/)\n   - Pre-order traversal\n   - Focusable identification\n   - Form field ordering\n   - Unreachable detection\n   - Coverage  85%\n\nExit: luma keyboard works, tab sequence correct\nTime: 3-4 days","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-27T13:18:41.8619973+01:00","updated_at":"2025-10-27T13:18:51.8905129+01:00","dependencies":[{"issue_id":"LUMA-8","depends_on_id":"LUMA-7","type":"blocks","created_at":"2025-10-27T13:18:55.5951729+01:00","created_by":"daemon"}]}
{"id":"LUMA-9","title":"Phase 6: UX Pattern Library","description":"Implement pattern validation with MUST/SHOULD rules per spec Section 7.\n\nDeliverables:\n1. Pattern Definitions (src/core/patterns/)\n   - pattern-registry.ts - Registry of all patterns\n   - form-basic.ts - Form.Basic (GOV.UK): field-has-label, actions-exist, actions-after-fields, has-error-state\n   - table-simple.ts - Table.Simple (IBM Carbon): title-exists, responsive-strategy, min-width-fit-or-scroll\n   - Each exports: name, source{name,url}, must[], should[]\n\n2. Pattern Validation\n   - validator.ts - Run pattern rules against scaffold\n   - Rule execution engine\n   - Issue generation with source attribution\n   - MUST failure detection (blocking)\n\n3. CLI Command\n   - flow.command.ts - Accept --patterns flag (e.g., form,table)\n   - Write flow.json with per-pattern results\n   - Exit 3 if any MUST fails\n\n4. Tests (tests/unit/patterns/)\n   - Form.Basic MUST/SHOULD rules\n   - Table.Simple rules\n   - Source attribution\n   - Coverage  85%\n\nExit: luma flow works, patterns validated with sources\nTime: 3-4 days","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-27T13:18:55.7612476+01:00","updated_at":"2025-10-27T13:19:34.9388951+01:00","dependencies":[{"issue_id":"LUMA-9","depends_on_id":"LUMA-8","type":"blocks","created_at":"2025-10-27T13:19:39.2815901+01:00","created_by":"daemon"}]}
