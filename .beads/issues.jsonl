{"id":"LUMA-1","title":"LUMA v1.0 Implementation","description":"Complete implementation of LUMA v1.0 - Layout \u0026 UX Mockup Analyzer CLI tool.\n\nThis epic tracks the full implementation across 10 phases:\n- Phase 1: Project Setup \u0026 Core Types\n- Phase 2: Ingest Command\n- Phase 3: Responsive Override System\n- Phase 4: Headless Layout Engine\n- Phase 5: Keyboard Flow Analysis\n- Phase 6: UX Pattern Library\n- Phase 7: Scoring System\n- Phase 8: Self-Description Commands\n- Phase 9: Report Generation\n- Phase 10: Integration \u0026 Polish\n\nTarget: TypeScript CLI tool that validates UI scaffolds against spec\nTimeline: 4-6 weeks (single developer, full-time)\nSee: IMPLEMENTATION-PLAN.md for full details","status":"closed","priority":1,"issue_type":"epic","created_at":"2025-10-27T13:15:47.8824266+01:00","updated_at":"2025-10-27T20:42:31.0257034+01:00","closed_at":"2025-10-27T20:42:31.0257034+01:00"}
{"id":"LUMA-10","title":"Phase 7: Scoring System","description":"Implement category scoring and aggregation per spec Section 8.\n\nDeliverables:\n1. Scoring Engine (src/core/scoring/)\n   - categories.ts - Category score calculation\n   - Pattern Fidelity: 100 - 30*MUST - 10*SHOULD\n   - Flow \u0026 Reachability: 100 - 30*unreachable - 10*warn\n   - Hierarchy \u0026 Grouping: 100 - 10*structural - 5*spacing\n   - Responsive Behavior: penalties across viewports\n   - aggregate.ts - Weighted aggregation (45%, 25%, 20%, 10%)\n\n2. Pass/Fail Logic\n   - No MUST failures\n   - No critical flow errors\n   - overall  85 (configurable)\n\n3. CLI Command\n   - score.command.ts - Read run folder artifacts\n   - Optional --weights JSON override\n   - Write score.json\n   - Exit 0 (pass) or 3 (fail)\n\n4. Tests (tests/unit/scoring/)\n   - Category calculations\n   - Weight application\n   - Pass criteria\n   - Custom weights\n   - Coverage  90%\n\nExit: luma score works, formulas match spec\nTime: 2-3 days","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-27T13:19:39.4490089+01:00","updated_at":"2025-10-27T20:20:53.0768381+01:00","closed_at":"2025-10-27T20:20:53.0768381+01:00","dependencies":[{"issue_id":"LUMA-10","depends_on_id":"LUMA-9","type":"blocks","created_at":"2025-10-27T13:21:33.7005741+01:00","created_by":"daemon"}]}
{"id":"LUMA-11","title":"Phase 8: Self-Description Commands","description":"Implement introspection commands per spec Section 9.7.\n\nDeliverables:\n1. Self-Description Commands (src/cli/)\n   - capabilities.command.ts - List commands, exit codes, defaults\n   - schema.command.ts - Summarize input/output schemas\n   - patterns.command.ts - List/show patterns (--list, --show Pattern)\n   - explain.command.ts - Topic-based explanations (--topic name)\n   - faq.command.ts - Q\u0026A\n\n2. Static Data (src/data/)\n   - faq.json - Common questions\n   - topics.json - Explanation topics (layout-solver, keyboard-flow, scoring, overrides, issue-fields, exit-codes, run-folders)\n   - Embedded in build\n\n3. Tests\n   - All commands return valid JSON with --json\n   - Content accuracy\n   - Coverage  70%\n\nExit: All self-description commands work, JSON valid\nTime: 2-3 days","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-27T13:21:33.8628251+01:00","updated_at":"2025-10-27T20:26:58.4128936+01:00","closed_at":"2025-10-27T20:26:58.4128936+01:00","dependencies":[{"issue_id":"LUMA-11","depends_on_id":"LUMA-10","type":"blocks","created_at":"2025-10-27T13:22:14.426645+01:00","created_by":"daemon"}]}
{"id":"LUMA-12","title":"Phase 9: Report Generation","description":"Implement HTML report generation (optional feature) per spec Section 9.6.\n\nDeliverables:\n1. Report Generator (src/core/report/)\n   - template.ts - HTML template (embedded)\n   - render.ts - Aggregate data from run folder\n   - Summary: scores, issues by severity, per-viewport results\n   - Issue grouping and formatting\n\n2. CLI Command\n   - report.command.ts - Generate report.html\n   - --out parameter for output path\n\n3. Tests\n   - Report contains all sections\n   - HTML is valid\n   - Issues displayed correctly\n   - Coverage  70%\n\nExit: luma report works, HTML readable\nTime: 2-3 days","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-27T13:22:14.5901182+01:00","updated_at":"2025-10-27T20:35:37.6172309+01:00","closed_at":"2025-10-27T20:35:37.6172309+01:00","dependencies":[{"issue_id":"LUMA-12","depends_on_id":"LUMA-11","type":"blocks","created_at":"2025-10-27T13:22:41.5851139+01:00","created_by":"daemon"}]}
{"id":"LUMA-13","title":"Phase 10: Integration \u0026 Polish","description":"End-to-end testing, documentation, examples, performance optimization.\n\nDeliverables:\n1. Integration Tests (tests/integration/)\n   - Full workflow: ingest  layout  keyboard  flow  score\n   - Happy path (Appendix A example from spec)\n   - Error scenarios\n   - Multiple viewports\n   - Pattern failures\n\n2. Example Scaffolds (examples/)\n   - happy-form.json - Valid form\n   - overflow-table.json - Table overflow issue\n   - keyboard-issues.json - Flow problems\n   - pattern-failures.json - MUST violations\n\n3. Documentation\n   - Update README with installation\n   - Create QUICKSTART.md\n   - API documentation\n   - Document each Issue ID\n\n4. Performance Optimization\n   - Profile against targets: ingest \u003c100ms, layout \u003c200ms, keyboard \u003c50ms, flow \u003c100ms\n   - Optimize hot paths\n\n5. CLI Polish\n   - Progress indicators\n   - Better error messages\n   - Help text\n   - --version flag\n\nExit: All integration tests pass, coverage 80%, performance targets met, docs complete\nTime: 4-5 days","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-27T13:22:41.7787004+01:00","updated_at":"2025-10-27T20:42:14.9175551+01:00","closed_at":"2025-10-27T20:42:14.9175551+01:00","dependencies":[{"issue_id":"LUMA-13","depends_on_id":"LUMA-12","type":"blocks","created_at":"2025-10-27T13:22:58.1051413+01:00","created_by":"daemon"}]}
{"id":"LUMA-14","title":"Add init command for project initialization","description":"","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-27T20:51:37.5367056+01:00","updated_at":"2025-10-27T20:56:54.9705131+01:00","closed_at":"2025-10-27T20:56:54.9705131+01:00"}
{"id":"LUMA-15","title":"LUMA v1.1: Scaffold Contract Topic","description":"Add scaffold-contract topic to explain command with canonical contract text. Create AGENT-RULES-SCAFFOLD.md file. Files: src/data/topics.json, AGENT-RULES-SCAFFOLD.md. Est: 2 hours","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-28T08:31:34.7502653+01:00","updated_at":"2025-10-28T09:08:09.1549364+01:00","closed_at":"2025-10-28T09:08:09.1549364+01:00"}
{"id":"LUMA-16","title":"LUMA v1.1: Golden Template","description":"Create templates/golden.todo.mock.json with pre-validated scaffold. Add golden-template topic to explain. Must pass ingest/layout/flow. Est: 4 hours","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-28T08:31:50.3061+01:00","updated_at":"2025-10-28T09:34:08.6780328+01:00","closed_at":"2025-10-28T09:34:08.6780328+01:00"}
{"id":"LUMA-17","title":"LUMA v1.1: scaffold new command (basic patterns)","description":"Implement luma scaffold new with todo-list and empty-screen patterns. Files: src/cli/scaffold.command.ts, src/core/scaffold/generator.ts, src/core/scaffold/patterns.ts, test/scaffold.test.ts. Validate at generation time. Est: 8 hours","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-28T08:32:16.9102316+01:00","updated_at":"2025-10-28T10:16:23.7548366+01:00","closed_at":"2025-10-28T10:16:23.7548366+01:00"}
{"id":"LUMA-18","title":"LUMA v1.1: Phase 1 Integration Tests","description":"Create integration tests for Phase 1 features. Test generated scaffolds through full pipeline. Files: test/integration/v1.1-phase1.test.ts. Est: 2 hours","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-28T08:32:21.9777071+01:00","updated_at":"2025-10-28T10:28:48.719429+01:00","closed_at":"2025-10-28T10:28:48.719429+01:00"}
{"id":"LUMA-19","title":"LUMA v1.1: Phase 1 Integration Tests","description":"Create integration tests for Phase 1 features. Test generated scaffolds through full pipeline. Depends on LUMA-15, LUMA-16, LUMA-17. Files: test/integration/v1.1-phase1.test.ts. Est: 2 hours","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-28T08:32:25.7681192+01:00","updated_at":"2025-10-28T10:26:31.3520892+01:00","closed_at":"2025-10-28T10:26:31.3520892+01:00"}
{"id":"LUMA-2","title":"Phase 1: Project Setup \u0026 Core Types","description":"Establish project foundation, tooling, and type system.\n\nDeliverables:\n1. Project Scaffolding\n   - Initialize npm/package.json with TypeScript, Commander.js, Vitest, Zod\n   - Configure TypeScript (tsconfig.json - strict mode, ES2022 target)\n   - Set up build scripts (tsc + esbuild)\n   - Configure ESLint + Prettier\n   - Set up Vitest test runner\n\n2. Type Definitions (src/types/)\n   - scaffold.ts - Complete Scaffold JSON types (schemaVersion, screen, settings)\n   - node.ts - All node type interfaces (Stack, Grid, Box, Text, Button, Field, Form, Table)\n   - issue.ts - Canonical Issue object shape (id, severity, message, nodeId, jsonPointer, viewport, details, source, suggestion)\n   - viewport.ts - Viewport \u0026 Frame types\n   - pattern.ts - Pattern rule types (MUST/SHOULD)\n   - output.ts - Command output types\n\n3. Utilities (src/utils/)\n   - run-folder.ts - Run folder management (timestamp generation, path creation for .ui/runs/\u003ctimestamp\u003e/)\n   - exit-codes.ts - Exit code constants (0=success, 2=invalid, 3=blocking, 4=internal, 5=version)\n   - json-pointer.ts - JSON pointer utilities for issue reporting\n   - logger.ts - Simple logging utility\n\nExit Criteria:\n npm run build compiles successfully\n npm test runs (even with no tests yet)\n All types exported and linted\n Run folder creation works\n\nEstimated: 3-5 days","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-27T13:15:57.1386044+01:00","updated_at":"2025-10-27T13:43:18.2261174+01:00","closed_at":"2025-10-27T13:43:18.2261174+01:00"}
{"id":"LUMA-20","title":"LUMA v1.1: Enhanced Error Structure (Core)","description":"Extend Issue type with jsonPointer, expected, found fields. Update validator to populate new fields. Files: src/types/issue.ts, src/core/ingest/validator.ts. Est: 6 hours","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-28T08:32:40.993147+01:00","updated_at":"2025-10-28T09:42:56.232584+01:00","closed_at":"2025-10-28T09:42:56.232584+01:00"}
{"id":"LUMA-21","title":"LUMA v1.1: Error Enhancement Wrapper","description":"Create error enhancer with suggestion/nextAction logic. Add --all-issues, --no-suggest, --format flags. Integrate into ingest command. Files: src/core/ingest/error-enhancer.ts, src/cli/ingest.command.ts, test/error-enhancer.test.ts. Depends on LUMA-20. Est: 5 hours","status":"closed","priority":1,"issue_type":"feature","created_at":"2025-10-28T08:32:47.0812974+01:00","updated_at":"2025-10-28T09:51:51.6943739+01:00","closed_at":"2025-10-28T09:51:51.6943739+01:00"}
{"id":"LUMA-22","title":"LUMA v1.1: Backward Compatibility Tests","description":"Create regression tests for all v1.0 scaffolds. Verify identical behavior under v1.1. Files: test/compatibility/v1.0-scaffolds.test.ts. Depends on LUMA-20, LUMA-21. Est: 2 hours","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-28T08:32:52.191997+01:00","updated_at":"2025-10-28T09:59:19.3992787+01:00","closed_at":"2025-10-28T09:59:19.3992787+01:00"}
{"id":"LUMA-23","title":"LUMA v1.1: Snippets Pack","description":"Create 6 JSON snippets: stack.vertical, stack.horizontal.toolbar, form.basic, table.simple, button.primary, field.email. Create snippets/index.json. Add snippets topic to explain. Files in snippets/ directory. Est: 6 hours","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-28T08:32:58.2168951+01:00","updated_at":"2025-10-28T15:27:13.4799563+01:00","closed_at":"2025-10-28T15:27:13.4799563+01:00"}
{"id":"LUMA-24","title":"LUMA v1.1: Expand scaffold new patterns","description":"Add form-basic and table-simple patterns to scaffold new command. Use snippets as building blocks. Files: src/core/scaffold/patterns.ts. Depends on LUMA-17, LUMA-23. Est: 4 hours","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-28T08:34:16.4675865+01:00","updated_at":"2025-10-28T19:13:22.7837623+01:00","closed_at":"2025-10-28T19:13:22.7837623+01:00"}
{"id":"LUMA-25","title":"LUMA v1.1: Snippets Integration Tests","description":"Test inserting each snippet into golden template. Test composing scaffolds from multiple snippets. Files: test/integration/snippets.test.ts. Depends on LUMA-23, LUMA-24. Est: 3 hours","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-28T08:34:20.9554484+01:00","updated_at":"2025-10-28T19:33:08.3906302+01:00","closed_at":"2025-10-28T19:33:08.3906302+01:00"}
{"id":"LUMA-26","title":"LUMA v1.1: Update AGENTS.md","description":"Add Preflight section with scaffold contract reference. Add example workflow using scaffold new. Update existing sections. Files: AGENTS.md. Est: 2 hours","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-28T08:34:25.8273429+01:00","updated_at":"2025-10-28T08:34:25.8273429+01:00"}
{"id":"LUMA-27","title":"LUMA v1.1: Update README and QUICKSTART","description":"Add v1.1 feature highlights to README. Update QUICKSTART with scaffold new examples. Link to new topics. Files: README.md, QUICKSTART.md. Est: 2 hours","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-28T08:34:30.3939401+01:00","updated_at":"2025-10-28T08:34:30.3939401+01:00"}
{"id":"LUMA-28","title":"LUMA v1.1: Version Bump and Changelog","description":"Bump package.json to 1.1.0. Create/update CHANGELOG.md with v1.1 additions. Files: package.json, CHANGELOG.md. Est: 1 hour","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-28T08:34:34.4103588+01:00","updated_at":"2025-10-28T10:31:27.8815966+01:00","closed_at":"2025-10-28T10:31:27.8815966+01:00"}
{"id":"LUMA-29","title":"LUMA v1.1: Final Integration Test","description":"End-to-end workflow test: read contract, generate scaffold, validate, insert snippets, run full pipeline. Verify all exit codes and outputs. Files: test/integration/v1.1-complete.test.ts. Depends on all features. Est: 2 hours","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-28T08:34:39.7114495+01:00","updated_at":"2025-10-28T19:03:22.984627+01:00","closed_at":"2025-10-28T19:03:22.984627+01:00"}
{"id":"LUMA-3","title":"Phase 2: Ingest Command Implementation","description":"","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-27T13:16:21.3912278+01:00","updated_at":"2025-10-27T13:23:07.5311674+01:00","closed_at":"2025-10-27T13:23:07.5311674+01:00"}
{"id":"LUMA-30","title":"Fix example scaffolds to match v1.0 schema","description":"","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-28T09:09:36.545414+01:00","updated_at":"2025-10-28T09:23:51.2475115+01:00","closed_at":"2025-10-28T09:23:51.2475115+01:00"}
{"id":"LUMA-31","title":"Fix run folder architecture - commands should share same run folder","description":"","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-28T09:25:12.4047949+01:00","updated_at":"2025-10-28T09:27:57.3498993+01:00","closed_at":"2025-10-28T09:27:57.3498993+01:00"}
{"id":"LUMA-32","title":"Add 'luma schema' command with component property documentation","description":"CRITICAL: Agent feedback shows component property documentation is the #1 blocker.\n\nGOAL: Create 'luma schema' command that shows valid properties, examples, and structure for all component types.\n\nFILES TO CREATE/MODIFY:\n- src/cli/schema.command.ts (enhance existing)\n- src/data/component-schemas.json (new - property definitions)\n- test/schema.test.ts (add tests for new functionality)\n\nREQUIREMENTS:\n\n1. Component Property Reference:\n   luma schema --component Text --json\n   Output: {type:'Text', properties:{text:'string',fontSize:'number'}, required:['text'], example:{...}}\n\n2. Show Examples:\n   luma schema --component Form --examples\n   Output: Working Form component with fields[] and actions[] properly structured\n\n3. List All Components:\n   luma schema --list\n   Output: [Text, Button, Field, Form, Table, Stack, Grid, Box]\n\n4. Common Mistakes Section:\n   For each component, document common errors like:\n   - Text: Use 'text' not 'content' or 'label'\n   - Button: Use 'text' not 'label', use 'roleHint' not 'variant'\n   - Table: columns must be string array not object array\n\nACCEPTANCE CRITERIA:\n- luma schema --list shows all component types\n- luma schema --component \u003ctype\u003e shows properties with types\n- luma schema --component \u003ctype\u003e --examples shows working examples\n- All components documented: Text, Button, Field, Form, Table, Stack, Grid, Box\n- Form structure clearly shows fields[] and actions[] requirements\n- Common mistakes listed for each component\n\nREFERENCE: LUMA_EVALUATION_REPORT.md Section 1","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-28T12:37:42.6465036+01:00","updated_at":"2025-10-28T13:37:34.7396908+01:00","closed_at":"2025-10-28T13:37:34.7396908+01:00"}
{"id":"LUMA-33","title":"Investigate and fix Form component validation","description":"CRITICAL: Agent tried 6+ approaches to create Form component, all failed with 'invalid_union' error.\n\nGOAL: Investigate Form component validation and either fix it or document why it doesn't work.\n\nFILES TO INVESTIGATE:\n- src/core/ingest/validator.ts (Form validation logic)\n- src/types/node.ts (Form type definition)\n- examples/happy-form.json (existing Form example)\n- templates/golden.todo.mock.json (check if it uses Form)\n\nINVESTIGATION STEPS:\n\n1. Check if Form validation is implemented:\n   - Search for Form in validator.ts\n   - Check if Form is in the Zod schema union\n   - Verify Form type definition exists in node.ts\n\n2. Test existing Form examples:\n   - Run 'luma ingest examples/happy-form.json'\n   - Check if any examples have working Form components\n   - Document the exact structure that works\n\n3. Identify the issue:\n   - Is Form not implemented in validator?\n   - Is Form structure documented incorrectly?\n   - Is there a bug in Form validation?\n\n4. Create working Form examples:\n   - Document exact structure for fields[]\n   - Document exact structure for actions[]\n   - Show nested vs flat field definitions\n\nEXPECTED FINDINGS:\nOne of these scenarios:\nA) Form validation not implemented  Add to validator\nB) Form works but structure undocumented  Add docs/examples\nC) Form has bugs  Fix validation logic\n\nACCEPTANCE CRITERIA:\n- Documented finding: Why Form validation fails\n- If Form works: Add working example to component-schemas.json\n- If Form broken: Create issue to fix it with specific requirements\n- Test case showing valid Form component passing validation\n\nREFERENCE: LUMA_EVALUATION_REPORT.md Section 3 - shows all failed Form attempts","status":"closed","priority":0,"issue_type":"bug","created_at":"2025-10-28T12:42:37.9386923+01:00","updated_at":"2025-10-28T12:57:28.946574+01:00","closed_at":"2025-10-28T12:57:28.946574+01:00"}
{"id":"LUMA-34","title":"Enhance validation error messages with specific property guidance","description":"Agent feedback: Error messages like 'Invalid input' and 'none of the union members matched' don't help debug issues.\n\nGOAL: Enhance error messages to provide specific, actionable guidance.\n\nFILES TO MODIFY:\n- src/core/ingest/error-enhancer.ts (already exists)\n- src/core/ingest/validator.ts (error generation)\n\nCURRENT ERRORS (Unhelpful):\n- 'Invalid input' at '/screen/root'\n- 'none of the union members matched'\n\nDESIRED ERRORS (Actionable):\n- 'Form.fields[0]: property 'type' not allowed, use 'label' instead'\n- 'Button: property 'variant' not supported, use 'roleHint' instead'\n- 'Table.columns: expected string array, got object array'\n- 'Text: property 'content' invalid, use 'text' instead'\n\nIMPLEMENTATION APPROACH:\n\n1. Property Name Mapping:\n   - Detect common wrong property names\n   - Map to correct alternatives\n   - Example: contenttext, labeltext, variantroleHint\n\n2. Type Mismatch Details:\n   - Show expected type vs received type\n   - Example: 'columns: expected string[], got object[]'\n\n3. Union Member Hints:\n   - Instead of 'none matched', list valid types\n   - Example: 'Expected one of: Stack, Grid, Form, Table, Text, Button'\n\n4. Component-Specific Suggestions:\n   - Maintain map of common mistakes per component\n   - Suggest fixes based on error context\n\nERROR ENHANCEMENT MAP:\n{\n  'Text': {\n    'content': 'Use text property instead',\n    'label': 'Use text property instead',\n    'fontWeight': 'Property not supported, use fontSize'\n  },\n  'Button': {\n    'label': 'Use text property instead',\n    'variant': 'Use roleHint property instead'\n  },\n  'Table': {\n    'columns[].id': 'columns should be string array, not objects'\n  }\n}\n\nACCEPTANCE CRITERIA:\n- Wrong property names suggest correct alternatives\n- Union errors list valid component types\n- Type mismatches show expected vs actual\n- At least 10 common mistakes have specific messages\n- Test cases for each error enhancement\n\nEST: 4 hours\nREFERENCE: LUMA_EVALUATION_REPORT.md Section 2 and Appendix error log","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-28T12:43:12.7850463+01:00","updated_at":"2025-10-28T14:14:00.2194656+01:00","closed_at":"2025-10-28T14:14:00.2194656+01:00"}
{"id":"LUMA-35","title":"Add scaffold patterns: contact-form, data-table-with-actions, modal-dialog, etc","description":"Agent found pattern generation much more useful than manual creation. Add more specific patterns.\n\nGOAL: Expand scaffold pattern library with real-world UI patterns.\n\nFILES TO MODIFY:\n- src/core/scaffold/patterns.ts (add new patterns)\n- test/scaffold.test.ts (add tests)\n\nNEW PATTERNS TO ADD:\n\n1. contact-form\n   - Form with name, email, phone fields\n   - Save and cancel actions\n   - Proper field types and validation hints\n\n2. data-table-with-actions\n   - Table with multiple columns\n   - Action buttons per row (edit, delete)\n   - Responsive scroll strategy\n\n3. modal-dialog\n   - Centered Box container\n   - Title, content area, action buttons\n   - Proper modal structure\n\n4. login-form\n   - Username/email field\n   - Password field\n   - Submit and forgot password actions\n\n5. multi-step-form\n   - Stack with multiple Form sections\n   - Navigation buttons (next, previous, submit)\n   - Step indicator\n\n6. dashboard-grid\n   - Grid layout with multiple widget areas\n   - Card-style boxes\n   - Responsive grid columns\n\nIMPLEMENTATION:\n- Each pattern should pass luma ingest\n- Each pattern should score  85\n- Include customization options (title, field names, etc.)\n- Document pattern purpose and use cases\n\nPATTERN STRUCTURE:\nexport function generateContactFormPattern(options: PatternOptions): Scaffold {\n  return {\n    schemaVersion: '1.0.0',\n    screen: {\n      id: options.screenId || 'contact-form',\n      title: options.title || 'Contact Form',\n      root: { /* Working Form structure */ }\n    },\n    settings: { /* Standard settings */ }\n  };\n}\n\nACCEPTANCE CRITERIA:\n- 6 new patterns added and tested\n- Each pattern passes validation (score  85)\n- Patterns documented in luma patterns command\n- Examples show in luma schema --examples\n- Integration tests for each pattern\n\nEST: 8 hours\nDEPENDS: LUMA-33 (need working Form structure)\nREFERENCE: LUMA_EVALUATION_REPORT.md Recommendation 4","status":"closed","priority":2,"issue_type":"feature","created_at":"2025-10-28T12:43:49.4768461+01:00","updated_at":"2025-10-28T19:22:27.8442751+01:00","closed_at":"2025-10-28T19:22:27.8442751+01:00"}
{"id":"LUMA-36","title":"Add component property topics to 'luma explain'","description":"Add component property examples to existing 'luma explain' topics for quick reference.\n\nGOAL: Enhance existing explain topics with component property examples.\n\nFILES TO MODIFY:\n- src/data/topics.json (add component examples)\n\nNEW TOPICS TO ADD:\n\n1. component-text\n   - All Text component properties\n   - Valid values and types\n   - Common mistakes\n   - Working examples\n\n2. component-button\n   - All Button properties\n   - roleHint values\n   - Examples with different roles\n\n3. component-table\n   - Table structure\n   - columns array format (string[])\n   - responsive.strategy options\n   - minColumnWidth usage\n\n4. component-form\n   - Form structure (once LUMA-33 resolved)\n   - fields[] format\n   - actions[] format\n   - Complete working example\n\n5. component-stack\n   - direction property\n   - gap and padding\n   - children nesting\n\n6. component-grid\n   - columns and rows\n   - gap property\n   - responsive behavior\n\nIMPLEMENTATION:\nEach topic should include:\n- Property list with types\n- Required vs optional properties\n- Valid enum values\n- Common mistakes section\n- 2-3 working examples\n\nTOPIC FORMAT:\n{\n  'component-text': {\n    'title': 'Text Component',\n    'summary': 'Display text content with optional styling',\n    'details': [\n      'Properties:',\n      '- id (string, required): Unique identifier',\n      '- type (string, required): Must be 'Text'',\n      '- text (string, required): Content to display',\n      '- fontSize (number, optional): Font size in pixels',\n      '- align (string, optional): left|center|right',\n      '',\n      'Common Mistakes:',\n      '- Using content instead of text',\n      '- Using fontWeight (not supported)',\n      '',\n      'Example: {id:title,type:Text,text:Hello World,fontSize:24}'\n    ]\n  }\n}\n\nACCEPTANCE CRITERIA:\n- 6 new component topics added\n- Each accessible via luma explain --topic component-\u003cname\u003e\n- All include properties, mistakes, and examples\n- JSON output supported\n- Topics listed in luma explain\n\nEST: 3 hours\nCOMPLEMENTS: LUMA-32 (schema command)\nREFERENCE: LUMA_EVALUATION_REPORT.md Recommendation 1","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-28T12:44:16.5760532+01:00","updated_at":"2025-10-28T14:52:50.0164521+01:00","closed_at":"2025-10-28T14:52:50.0164521+01:00"}
{"id":"LUMA-37","title":"Fix 4 pre-existing test failures (timeouts and assertion errors)","description":"Four integration tests were failing before LUMA-25 work: 1) test/schema.test.ts 'should document all 8 component types' - timeout after 5000ms. 2) test/schema.test.ts 'should provide working examples for all components' - timeout after 5000ms. 3) tests/integration/v1.1-complete.test.ts 'should run complete pipeline on golden template' - tablePattern undefined assertion failure. 4) tests/integration/v1.1-phase1.test.ts 'should demonstrate agent workflow' - timeout after 5000ms. These are unrelated to snippets work. Files: test/schema.test.ts, tests/integration/v1.1-complete.test.ts, tests/integration/v1.1-phase1.test.ts","status":"closed","priority":2,"issue_type":"bug","created_at":"2025-10-28T19:37:55.6380711+01:00","updated_at":"2025-10-28T20:01:29.2985003+01:00","closed_at":"2025-10-28T20:01:29.2985003+01:00"}
{"id":"LUMA-4","title":"Phase 2: Ingest Command Implementation","description":"","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-27T13:16:26.0068269+01:00","updated_at":"2025-10-27T13:23:07.5367327+01:00","closed_at":"2025-10-27T13:23:07.5367327+01:00"}
{"id":"LUMA-5","title":"Phase 2: Ingest Command Implementation","description":"Implement scaffold validation and normalization.\n\nDeliverables:\n1. Schema Validation (src/core/ingest/)\n   - validator.ts - Zod schemas for all node types\n   - schema-version.ts - Version check (support 1.0.0)\n   - normalize.ts - Apply defaults\n\n2. Ingest Logic\n   - ingest.ts - Main orchestrator\n   - Validate required fields\n   - Check node ID uniqueness\n   - Validate enums\n   - Emit errors/warnings as Issue objects\n\n3. CLI Command (src/cli/)\n   - ingest.command.ts - Commander.js command\n   - File reading, JSON parsing\n   - Write ingest.json to run folder\n   - Exit codes: 0, 2, 5\n\n4. Tests (tests/unit/ingest/)\n   - Valid scaffold passes\n   - Invalid schemaVersion detection\n   - Missing required fields\n   - Unknown fields ignored\n   - Duplicate node IDs\n   - Coverage  80%\n\nExit: luma ingest works, all spec rules enforced\nTime: 3-4 days","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-27T13:16:28.6455193+01:00","updated_at":"2025-10-27T13:56:27.8978762+01:00","closed_at":"2025-10-27T13:56:27.8978762+01:00","dependencies":[{"issue_id":"LUMA-5","depends_on_id":"LUMA-2","type":"blocks","created_at":"2025-10-27T13:17:44.5666306+01:00","created_by":"daemon"}]}
{"id":"LUMA-6","title":"Phase 3: Responsive Override System","description":"Implement responsive override application logic per spec Section 3.4.\n\nDeliverables:\n1. Override Engine (src/core/layout/)\n   - responsive.ts - Parse at keys, apply overrides\n   - Implement normative algorithm: collect \u003e=X where XW in ascending order, \u003c=Y where YW in descending order\n   - Shallow merge objects, replace arrays\n   - Handle nested overrides correctly\n\n2. Tests (tests/unit/layout/)\n   - Override at \u003e=320 applied correctly\n   - Override at \u003c=768 applied correctly\n   - Multiple overrides in correct order\n   - Nested object merging\n   - Array replacement\n   - Coverage  90%\n\nExit: Override algorithm deterministic, matches spec exactly\nTime: 2-3 days","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-27T13:17:48.3402983+01:00","updated_at":"2025-10-27T14:09:04.2810393+01:00","closed_at":"2025-10-27T14:09:04.2810393+01:00","dependencies":[{"issue_id":"LUMA-6","depends_on_id":"LUMA-5","type":"blocks","created_at":"2025-10-27T13:18:03.7535832+01:00","created_by":"daemon"}]}
{"id":"LUMA-7","title":"Phase 4: Headless Layout Engine","description":"Implement layout simulation and frame computation per spec Section 5.\n\nDeliverables:\n1. Layout Primitives (src/core/layout/)\n   - measure.ts - Text, Button, Field, Table measurement\n   - Text: fontSize*0.55*charCount, line wrapping at 1.4 line height\n   - Button/Field: respect minTouchTarget (default 44x44)\n   - Table: header 48 + rowHeight*rows\n\n2. Container Layout\n   - stack.ts - Vertical/horizontal with gap/padding/align/wrap\n   - grid.ts - Grid with column reduction (minColWidth logic)\n   - box.ts - Simple box with padding\n   - Alignment: start, center, end, stretch\n\n3. Layout Orchestrator\n   - layout.ts - Main engine, pre-order traversal\n   - Frame computation {x,y,w,h} per node\n   - Issue detection: overflow-x, spacing-off-scale, touch-target-too-small, primary-below-fold\n\n4. CLI Command\n   - layout.command.ts - Parse --viewports, run per viewport\n   - Write layout_WxH.json per viewport\n   - Exit 3 if blocking issues\n\n5. Tests (tests/unit/layout/)\n   - Stack layouts, Grid column reduction\n   - Overflow detection, Primary below fold\n   - Spacing validation\n   - Coverage  85%\n\nExit: luma layout works, frames correct per spec\nTime: 4-5 days","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-27T13:18:08.0066034+01:00","updated_at":"2025-10-27T16:42:35.0048727+01:00","closed_at":"2025-10-27T16:42:35.0048727+01:00","dependencies":[{"issue_id":"LUMA-7","depends_on_id":"LUMA-6","type":"blocks","created_at":"2025-10-27T13:18:41.6965354+01:00","created_by":"daemon"}]}
{"id":"LUMA-8","title":"Phase 5: Keyboard Flow Analysis","description":"Implement keyboard tab sequence and flow validation per spec Section 6.\n\nDeliverables:\n1. Keyboard Flow Engine (src/core/keyboard/)\n   - traversal.ts - Pre-order tree traversal\n   - focusable.ts - Identify Button, Field, focusable:true nodes\n   - sequence.ts - Build tab sequence\n   - flow-rules.ts - Detect cancel-before-primary, field-after-actions\n\n2. Form-Specific Logic\n   - Validate fields before actions\n   - Action group analysis\n   - Unreachable node detection (critical)\n\n3. CLI Command\n   - keyboard.command.ts - Generate keyboard.json\n   - Optional --state parameter\n   - Exit 3 if critical flow errors\n\n4. Tests (tests/unit/keyboard/)\n   - Pre-order traversal\n   - Focusable identification\n   - Form field ordering\n   - Unreachable detection\n   - Coverage  85%\n\nExit: luma keyboard works, tab sequence correct\nTime: 3-4 days","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-27T13:18:41.8619973+01:00","updated_at":"2025-10-27T17:25:53.9188163+01:00","closed_at":"2025-10-27T17:25:53.9188163+01:00","dependencies":[{"issue_id":"LUMA-8","depends_on_id":"LUMA-7","type":"blocks","created_at":"2025-10-27T13:18:55.5951729+01:00","created_by":"daemon"}]}
{"id":"LUMA-9","title":"Phase 6: UX Pattern Library","description":"Implement pattern validation with MUST/SHOULD rules per spec Section 7.\n\nDeliverables:\n1. Pattern Definitions (src/core/patterns/)\n   - pattern-registry.ts - Registry of all patterns\n   - form-basic.ts - Form.Basic (GOV.UK): field-has-label, actions-exist, actions-after-fields, has-error-state\n   - table-simple.ts - Table.Simple (IBM Carbon): title-exists, responsive-strategy, min-width-fit-or-scroll\n   - Each exports: name, source{name,url}, must[], should[]\n\n2. Pattern Validation\n   - validator.ts - Run pattern rules against scaffold\n   - Rule execution engine\n   - Issue generation with source attribution\n   - MUST failure detection (blocking)\n\n3. CLI Command\n   - flow.command.ts - Accept --patterns flag (e.g., form,table)\n   - Write flow.json with per-pattern results\n   - Exit 3 if any MUST fails\n\n4. Tests (tests/unit/patterns/)\n   - Form.Basic MUST/SHOULD rules\n   - Table.Simple rules\n   - Source attribution\n   - Coverage  85%\n\nExit: luma flow works, patterns validated with sources\nTime: 3-4 days","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-27T13:18:55.7612476+01:00","updated_at":"2025-10-27T20:13:45.6942403+01:00","closed_at":"2025-10-27T20:13:45.6942403+01:00","dependencies":[{"issue_id":"LUMA-9","depends_on_id":"LUMA-8","type":"blocks","created_at":"2025-10-27T13:19:39.2815901+01:00","created_by":"daemon"}]}
